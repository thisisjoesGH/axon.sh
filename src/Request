Request() {
  local method="$1"
  local endpoint="$2"
  local keys="$3"
  local data="$4"
  local host="$5"
  local authed="$6"
  local redirect="$7"
  local headers="$8"
  local scheme="${config[scheme]}"
  local port="${config[port]}"

  local required_parameters=('method' 'endpoint')
  for parameter in "${required_parameters[@]}"; do
    [[ "${!parameter}" ]] || {
      Log error "Missing required parameter '$parameter'"
      return 1
    }
  done

  if [[ -z "$host" ]]; then
    host="${config[homeserver]}"
  fi

  local uri="$scheme://$host:$port$endpoint"
  Log info "Using method '$method' in request to '$uri'"

  local header_arg=''
  for header in "${headers[@]}"; do
    if [[ ! -z "$header" ]]; then
      Log debug "Got header '$header'"
      header_arg+="--header '$header' "
    fi
  done

  if [[ "$redirect" == 'true' ]]; then
    Log info "Following redirects for this request"
    local redirect_arg="--location"
  else
    Log debug "Not following redirects for this request"
  fi

  if [[ "$authed" == 'false' ]]; then
    Log info "Not sending authorization header for this request"
  else
    Log debug "Sending authorization header for this request"
    local auth_header="Authorization: Bearer ${config[admin_token]}"
  fi

  local std_out
  local std_err
  CatchStream std_out std_err curl --request "$method" \
                                   ${data:+--data "$data"} \
                                   ${redirect_arg:+"$redirect_arg"} \
                                   ${header_arg:+"$header_arg"} \
                                   ${auth_header:+--header "$auth_header"} \
                                   --user-agent "${projectName}/${projectVersion}" \
                                   --write-out '<+>%{response_code}' \
                                   --silent \
                                   --show-error \
                                   --connect-timeout 60 \
                                   "$uri"

  local return_code="$?"
  if [[ "$return_code" > 0 ]]; then
    Log error "Curl failed with message '$std_err'"
    return 1
  fi

  std_out="${std_out//[[:cntrl:]]/}"
  std_out="${std_out//[[:blank:]]/}"
  std_out="${std_out//|/}"
  std_out="${std_out/<+>/|}"

  local IFS="|"
  read -r -a response <<< "$std_out"
  local body="${response[0]}"
  local status_code="${response[1]}"
  unset IFS

  if CheckStatusCode "$status_code"; then
    ValidateJSON "$body" || return 1
    ProcessResponse "$body" "$keys"
  else
    Log error "Request failed while using method '$method' in request to '$uri'."
    Log debug "Got body '$body'".
    ValidateJSON "$body" || return 1
    ProcessResponse "$body" "errcode error"
    Log error "Server returned error message '${key_values[errcode]}: ${key_values[error]}'"
    return 1
  fi
}
