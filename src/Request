Request() {
  local request_method="$1"
  local request_data="$2"
  local request_endpoint="$3"
  local request_keys="$4"
  local request_header="Authorization: Bearer ${config[admin_token]}"
  local request_domain="${config[homeserver]}"
  local request_scheme="${config[scheme]}"
  local request_port="${config[port]}"

  local request_uri="$request_scheme://$request_domain:$request_port$request_endpoint"

  Log info "Using method '$request_method' in request to '$request_uri'"

  local std_out
  local std_err
  CatchStream std_out std_err curl --request "$request_method" --header "$request_header" --data "$request_data"  --write-out '|%{response_code}' --silent --show-error "$request_uri" --connect-timeout 60

  local return_code="$?"
  if [[ "$return_code" > 0 ]]; then
    Log error "Curl failed with message '$std_err'"
    return 1
  fi

  oIFS="$IFS"
  IFS="|"
  local request_response
  read -r -a request_response <<< "$std_out"
  local request_error="$std_err"
  IFS="$oIFS"
  
  local request_body="${request_response[0]}"
  local status_code="${request_response[1]}"

#  for part in "$request_response"; do    

  if CheckStatusCode "$status_code"; then
    ProcessResponse "$request_body" "$request_keys"
  else
    Log error "Request failed while using method '$request_method' in request to '$request_uri'."
    Log debug "Got body '$request_body'".
    ProcessResponse "$request_body" "errcode error"
    Log error "Server returned error message '${key_values[errcode]}: ${key_values[error]}'"
    return 1
  fi
}
