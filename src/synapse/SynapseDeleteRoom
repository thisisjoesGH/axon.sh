SynapseDeleteRoom() {
  Log debug "Got args '$*'"

  if [[ "$1" = "status" ]]; then
    SynapseDeleteRoomStatus "$2" || return 1
    return 0
  fi

  DoDeleteRoom() {
    local request_body
    ReturnRequestBody s_delete_room request_body
    Log debug "Assembled request with method '${s_delete_room_api[method]}', body '$request_body', to be sent to '${s_delete_room_api[path]}'"
    local -A params=(
      [method]="${s_delete_room_api[method]}"
      [path]="${s_delete_room_login_api[path]}"
      [keys]="delete_id"
      [data]="$request_body"
    )
    Request params || return 1

    echo -e "Deletion Job ID: ${key_values[delete_id]}\n"
  }

  CheckLoginStatus || return 1
  CheckServerSupport "${s_delete_room_api[minimum_version]}" || return 1
  DefineSynapseParams

  Log info "Deleting room from ${config[homeserver]}"

  read -r -p "Room ID:" input_room_id
    local room_id="$(EncodeUrl "$input_room_id")"
    Log debug "Room ID is '$room_id'"
    s_delete_room_url_params[room_id]="$room_id"
    Log debug "URL 'room_id' param set to '${s_delete_room_url_params[room_id]}'"
  read -r -p "Block users from rejoining the room? (y/N):" input_block_user_joins
    case "$input_block_user_joins" in
      [yY]|[Yy][Ee][Ss] ) s_delete_room_body_params[block]="true";;
      [Nn]|[Nn][Oo]     ) s_delete_room_body_params[block]="false";;
    esac
  read -r -p "Purge all events? (y/N):" input_purge_events
    case "$input_purge_events" in
      [yY]|[Yy][Ee][Ss] ) s_delete_room_body_params[purge]="true";;
      [Nn]|[Nn][Oo]     ) s_delete_room_body_params[purge]="false";;
    esac

  DefineSynapseEndpoints
  DoDeleteRoom
}
