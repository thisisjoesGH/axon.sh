# Copyright (C) 2021-2022 joe <joe@thisisjoes.site>
# SPDX-License-Identifier: GPL-3.0-only

SynapseUserDeactivate() {
  Log debug "Got args '$*'"

  DoUserDeactivate() {
    local object
    ConstructObject s_user_deactivate object || return 1

    local -A params=(
      [method]="${s_user_deactivate_api[method]}"
      [path]="${s_user_deactivate_api[path]}"
      [data]="$object"
    )
    local response
    Request params response || {
      HandleMatrixError response
      return 1
    }
  }

  CheckLoginStatus || return 1
  CheckServerSupport "${s_user_deactivate_api[minimum_version]}" || return 1

  Log info "Deactivating user on homeserver ${config[homeserver]}"

  Read -r -p "Username to deactivate:" input_user_name
    if [[ "$input_user_name" == "${config[admin_user]}" ]]; then
      LogTerm warn "You are about to deactivate the account you are currently using! Deactivation is intended to be permanent and will likely have irreversible consequences."
      ConfirmContinue || return 1
    fi

    local user_id="@$input_user_name:${config[homeserver]}"
    Log debug "User ID is '$user_id'"
    local user_id="$(EncodeUrl "$user_id")"
    Log debug "User ID encoded as '$user_id'"
    s_user_deactivate_url_params[user_id]="$user_id"
    Log debug "URL 'user_id' param set to '${s_user_deactivate_url_params[user_id]}'"
  Read -r -p "Erase user profile? (Y/n):" input_user_is_erased
    case "$input_user_is_erased" in
      [yY]|[Yy][Ee][Ss] ) s_user_deactivate_body_params[erase]="true";;
      [Nn]|[Nn][Oo]     ) s_user_deactivate_body_params[erase]="false";;
    esac

  DefineSynapseEndpoints
  DoUserDeactivate
}
