# Copyright (C) 2021-2022 joe <joe@thisisjoes.site>
# SPDX-License-Identifier: GPL-3.0-only

Request() {
  local -n __Request_parameters="$1"
  local method="${__Request_parameters[method]}"
  local path="${__Request_parameters[path]}"
  local data="${__Request_parameters[data]}"
  local host="${__Request_parameters[host]}"
  local auth="${__Request_parameters[auth]}"
  local redirect="${__Request_parameters[redirect]}"
  local -A headers="${__Request_parameters[headers]}"
  local -n __Request_response_body="$2"
  local scheme="${config[scheme]}"
  local port="${config[port]}"

  local required_parameters=('method' 'path')
  for parameter in "${required_parameters[@]}"; do
    Log debug "Checking parameter '$parameter', value '${!parameter}'"
    [[ "${!parameter}" ]] || {
      Log error "Missing required parameter '$parameter'"
      return 1
    }
  done

  if [[ -z "$host" ]]; then
    host="${config[base_url]}"
  fi

  local uri="$scheme://$host:$port$path"
  Log info "Using method '$method' in request to '$uri'"

  local -a header_arg=()
  if [[ ! -z "${headers[*]}" ]]; then
    for header in "${!headers[@]}"; do
      Log debug "Got header name '$header', value '${headers[$header]}'"
      header_arg+=(--header "${header}: ${headers[$header]}")
    done
    Log debug "Constructed header arg '${header_arg[*]}'"
  fi

  if [[ "$redirect" == 'true' ]]; then
    Log info "Following redirects for this request"
    local redirect_arg="--location"
  else
    Log debug "Not following redirects for this request"
  fi

  if [[ "$auth" == 'false' ]]; then
    Log info "Not sending authorization header for this request"
  else
    Log debug "Sending authorization header for this request"
    local auth_header="Authorization: Bearer ${config[admin_token]}"
  fi

  Log debug "Assembled request '--request $method'"
  Log debug "Assembled request '${data:+--data $data}'"
  Log debug "Assembled request '${redirect_arg:+$redirect_arg}'"
  Log debug "Assembled request '${header_arg[*]}'"
  Log debug "Assembled request '${auth_header:+--header $auth_header}'"
  Log debug "Assembled request '--user-agent ${projectName}/${projectVersion}'"
  Log debug "Assembled request '--write-out '<+>%{response_code}''"
  Log debug "Assembled request '--silent'"
  Log debug "Assembled request '--show-error'"
  Log debug "Assembled request '--connect-timeout 60'"
  Log debug "Assembled request '$uri'"

  local std_out
  local std_err
  CatchStream std_out std_err curl --request "$method" \
                                   ${data:+--data "$data"} \
                                   ${redirect_arg:+"$redirect_arg"} \
                                   "${header_arg[@]}" \
                                   ${auth_header:+--header "$auth_header"} \
                                   --user-agent "${projectName}/${projectVersion}" \
                                   --write-out '<+>%{response_code}' \
                                   --silent \
                                   --show-error \
                                   --connect-timeout 60 \
                                   "$uri"

  local return_code="$?"
  if (( "$return_code" > 0 )); then
    Log error "Curl failed with message '$std_err'"
    return 1
  fi

  std_out="${std_out//[[:cntrl:]]/}"
  std_out="${std_out//|/}"
  std_out="${std_out/<+>/|}"

  local IFS="|"
  read -r -a response <<< "$std_out"
  local body="${response[0]}"
  local status_code="${response[1]}"
  unset IFS

  if CheckStatusCode "$status_code"; then
    __Request_response_body="$body"
  else
    Log error "Request failed while using method '$method' in request to '$uri'."
    Log debug "Got body '${body:0:255}'..."
    __Request_response_body="$body"
    return 1
  fi
}
